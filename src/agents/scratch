import random, time
from queue import Queue
from threading import Thread

import numpy as np

from src.agents.PlayerML import sigmoid
from src.agents.init_NN import N_INPUT, initialize_NN, N_OUT, init_normal


class C:
    @staticmethod
    def s():
        print("s")

def producer(comm):
    time.sleep(3)
    print("wait for input")
    print(comm.get())

def receiver(comm):
    comm.put(19)
    print("received: {}".format(comm.get()))

def threader():
    comm = Queue()
    tp = Thread(target=producer, args=(comm,))
    tr = Thread(target=receiver, args=(comm,))
    tp.start()
    tr.start()

    tp.join()
    tr.join()

    print("finished")

def forward_pass_noloop(state, network):
    W_int = network[0]
    W_out = network[1]
    P_int = sigmoid(np.dot(W_int, state))
    p_out = sigmoid(P_int.dot(W_out))
    return p_out

def forward_pass_loop(state, network):
    res = state
    print(res.shape)
    for layer in network[:-1]:
        res = sigmoid(np.dot(layer, res))
        print(layer.shape, res.shape)
    res = sigmoid(network[-1].dot(res))
    print(network[-1].shape, res.shape)
    return res


if __name__ == '__main__':

    state = np.array([random.randint(0, 1) for _ in range(N_INPUT)])
    network_short = initialize_NN([10], "xavier")
    network_long = initialize_NN([10, 20, 30, 20, 10], "xavier")

    print(' - '.join([str(layer.shape) for layer in network_short]), end='\n\n')

    print(forward_pass_loop(state, network_short))

    print("-")

    print(' - '.join([str(layer.shape) for layer in network_long]), end='\n\n')

    print(forward_pass_loop(state, network_long))

